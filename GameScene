//
//  GameScene.swift
//  pigeon
//
//  Created by Lindsey Lawson on 10/8/19.
//  Copyright Â© 2019 Lindsey Lawson. All rights reserved.
//

import SpriteKit
import GameplayKit
import CoreMotion

class GameScene: SKScene, SKPhysicsContactDelegate {
    
    var pigeon: SKSpriteNode!
   
    var gameTimer: Timer!
    
    var randomCats = ["cat", "cat2" ]
    
     let playableRect: CGRect
    
    let motionManger = CMMotionManager()
    var xAcceleration:CGFloat = 0
    
    
    
    
    /////Initializers/////
    /////////////////////
    override init(size: CGSize) {
        let maxAspectRatio: CGFloat = 16 / 9 //1.77
        let playableHeight = size.width / maxAspectRatio
        let playableMargin = (size.height - playableHeight) / 2
        
        playableRect = CGRect(x: 0, y: playableMargin, width: size.width, height: playableHeight)
        
        
        
        super.init(size: size)
    }
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    
    /////Overrides//////
    ////////////////////
    
    override func didMove(to view: SKView) {
        
        self.physicsWorld.gravity = CGVector(dx: 0, dy: 0)
        self.physicsWorld.contactDelegate = self
        
        addBackground()
        pigeonFlying()
        addTimer()
        addMotionMng()
        
      
        
       
    }
    
    
    override func touchesEnded(_ touches: Set<UITouch>, with event: UIEvent?) {
        shootStar()
    }
    
    
    override func didSimulatePhysics() {
        
        pigeon.position.x += xAcceleration * 50
        
        if pigeon.position.x < -20 {
            pigeon.position = CGPoint(x: self.size.width + 20, y: pigeon.position.y)
        }else if pigeon.position.x > self.size.width + 20 {
            pigeon.position = CGPoint(x: -20, y: pigeon.position.y)
        }
        
    }
    
    
    override func update(_ currentTime: TimeInterval) {
        
    }
    
    /////Methods/////
    ////////////////

    
    func addBackground() {
        let background = SKSpriteNode(imageNamed: "nycSil2")
        background.anchorPoint = CGPoint.zero
        background.zPosition = -1
        addChild(background)
    }
    
    func pigeonFlying() {
        pigeon = SKSpriteNode(imageNamed: "mainPigeon2")
        pigeon.position = CGPoint(x: self.frame.width / 2, y: self.frame.height / 2)
        pigeon.setScale(0.7)
        pigeon.zPosition = 2
        let atlas = SKTextureAtlas(named: "Pigeon")
        var p0 = SKTexture()
        var p1 = SKTexture()
        p0 = atlas.textureNamed("mainPigeon2")
        p1 = atlas.textureNamed("mainPigeon3")
        let textures = [p0, p1]
        let pAnimation = SKAction.animate(with: textures, timePerFrame: 0.2)
        pigeon.run(SKAction.repeatForever(pAnimation))
        addChild(pigeon)
    }
    
    func addTimer(){
        
        //this is used to help with difficulty of level
        gameTimer = Timer.scheduledTimer(timeInterval: 0.75, target: self, selector: #selector(addCats), userInfo: nil, repeats: true)
    }
    
    @objc func addCats(){
        randomCats = GKRandomSource.sharedRandom().arrayByShufflingObjects(in: randomCats) as! [String]
        let cat = SKSpriteNode(imageNamed: randomCats[0])
        let catPosition = GKRandomDistribution(lowestValue: 0, highestValue: 1000)
        let positionCat = CGFloat(catPosition.nextInt())
        cat.position = CGPoint(x: positionCat, y: self.frame.size.height + cat.size.height)
        cat.physicsBody = SKPhysicsBody(rectangleOf: cat.size)
        cat.physicsBody?.isDynamic = true
        cat.setScale(0.7)
        self.addChild(cat)
        
        let animationDuration:TimeInterval = 6
        
        var actionArray = [SKAction]()
        
        
        actionArray.append(SKAction.move(to: CGPoint(x: positionCat, y: -cat.size.height), duration: animationDuration))
        actionArray.append(SKAction.removeFromParent())
        
        cat.run(SKAction.sequence(actionArray))
        
    }
    
    func addMotionMng() {
        motionManger.accelerometerUpdateInterval = 0.2
        motionManger.startAccelerometerUpdates(to: OperationQueue.current!) { (data:CMAccelerometerData?, error:Error?) in
            if let accelerometerData = data {
                let acceleration = accelerometerData.acceleration
                self.xAcceleration = CGFloat(acceleration.x) * 0.75 + self.xAcceleration * 0.25
            } } }
    
    func shootStar(){
        let star = SKSpriteNode(imageNamed: "star1")
        star.position = pigeon.position
        star.position.y += 5
        star.setScale(0.5 )
        
        star.physicsBody = SKPhysicsBody(circleOfRadius: star.size.width/2)
        star.physicsBody?.isDynamic = true
        
        star.physicsBody?.categoryBitMask = PhysicsCategory.Star
        star.physicsBody?.contactTestBitMask = PhysicsCategory.Cat
        star.physicsBody?.collisionBitMask = 0
        star.physicsBody?.usesPreciseCollisionDetection = true
        
        self.addChild(star)
        
        let animationDur : TimeInterval = 0.3
        var actionArray = [SKAction]()
        
        actionArray.append(SKAction.move(to: CGPoint(x: pigeon.position.x, y: self.frame.size.height + 10) , duration: animationDur))
        actionArray.append(SKAction.removeFromParent())
        
        star.run(SKAction.sequence(actionArray))
    }
    
    func starShootCat (star:SKSpriteNode, cat:SKSpriteNode){
        star.removeFromParent()
        cat.removeFromParent()
        
    }
    
    func didBegin(_ contact: SKPhysicsContact) {
        var firstBody:SKPhysicsBody
        var secondBody:SKPhysicsBody
        
        if contact.bodyA.categoryBitMask < contact.bodyB.categoryBitMask {
            firstBody = contact.bodyA
            secondBody = contact.bodyB
        }else{
            firstBody = contact.bodyB
            secondBody = contact.bodyA
        }
        
        if (firstBody.categoryBitMask & PhysicsCategory.Star) != 0 && (secondBody.categoryBitMask & PhysicsCategory.Cat) != 0 {
            starShootCat(star: firstBody.node as! SKSpriteNode, cat: secondBody.node as! SKSpriteNode)
        }
        
    }
    
}
